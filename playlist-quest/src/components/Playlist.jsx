import React from 'react';
import IosShareIcon from '@mui/icons-material/IosShare';
import CloseIcon from '@mui/icons-material/Close';
import RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';
import { blue } from '@mui/material/colors';

const Playlist = ({isVisible, onClose, songs, onRemoveSong}) => {
    if (!isVisible) return null;
    async function getCurrentUser(accessToken) {
            const url = 'https://api.spotify.com/v1/me';
            const headers = {
              "Authorization": `Bearer ${accessToken}`
            };
          
            try {
              const response = await fetch(url, { headers });
              const data = await response.json();
              return data.id;
            } catch (error) {
              console.error('Error fetching user profile:', error);
              throw error;
            }
    }
    async function createPlaylist(accessToken, userId) {
        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;
        const headers = {
            "Authorization": `Bearer ${accessToken}`,
            "Content-Type": "application/json"
        };
        const body = JSON.stringify({
            name: "Playlist Quest Playlist",
            public: false,
            description: "A playlist generated by Playlist Quest"
        });
        const response = await fetch(url, {
            method: 'POST',
            headers: headers,
            body: body
        })
        const data = await response.json();
        return data.id;
    }
    function handleExportClick() {
        console.log("Exporting playlist...");
        let token = window.localStorage.getItem('spotify_access_token');
        let uris = songs.map(song => `spotify:track:${song.id}`);
        let data = {
            uris: uris,
        };
        
        
        const exportPlaylist = async () => {
            let userId = await getCurrentUser(token);
            let playlistId = await createPlaylist(token, userId);

            let response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });
            let responseData = await response.json();
            console.log(responseData);
        }
        exportPlaylist();
    }
  return (
    <div className="fixed inset-0 bg-black/25 z-50 flex w-fit max-w-2xl mx-auto h-1/2">

        <div className="p-4 max-w-md bg-white rounded-lg border shadow-md sm:p-8 dark:bg-gray-800 dark:border-gray-700">
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold leading-none text-gray-900 dark:text-white">Playlist</h3>
                <div className='align-right space-x-2'>
                    <IosShareIcon style={{color: blue[600]}} onClick={handleExportClick} className='cursor-pointer'></IosShareIcon>
                    <CloseIcon style={{color: blue[600]}} onClick={onClose} className="cursor-pointer"></CloseIcon>
                </div>
            </div>
            <div className="flow-root overflow-y-auto h-5/6">
                <ul className="divide-y divide-gray-200 dark:divide-gray-700">
                    {songs.map((song, index) => (
                        <li key={index} className="py-3 sm:py-4">
                        <div className="flex items-center space-x-4">
                            <div className="flex-shrink-0">
                            <img className="w-12 h-12" src={song.image} alt="Song" />
                            </div>
                            <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium text-gray-900 truncate dark:text-white">
                                {song.title}
                            </p>
                            <p className="text-sm text-gray-500 truncate dark:text-gray-400">
                                {song.artist}
                            </p>
                            </div>
                            <div className="flex-shrink-0 pr-2">
                            <RemoveCircleOutlineIcon style={{color: blue[600]}} onClick={() => onRemoveSong(song.id)} className="cursor-pointer"></RemoveCircleOutlineIcon>
                            </div>
                        </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    </div>
  );
};

export default Playlist;
